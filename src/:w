#include "srv.h"
#include "helper.h"
#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h> // read(), write(), close()

// unicorn
#include <unicorn/unicorn.h>
#include <unicorn/x86.h>

#define PORT 8080
#define MAX 4096
#define DEBUG true

#define BASE_ADDR 0x1000000
#define SA struct sockaddr

// Function designed for chat between client and server.
void repl(int connfd)
{
    char buff[MAX];
    // infinite loop for chat
    for (;;) {
        bzero(buff, MAX);

        // read the message from client and copy it in buffer
        read(connfd, buff, sizeof(buff));
        // print buffer which contains the client contents
        printf("From client: %X", buff);

        // send that buffer to client
        //write(connfd, buff, sizeof(buff));
        if (strncmp("SHELLCODE", buff, 4) == 0) {


        }
        /*
        uc_engine *uc;
        uc_err err;

        char *shellcodebuf = (char *)malloc(sizeof(buff));
        strcpy(shellcodebuf, buff);

        // create the x86 emulator
        err = uc_open(UC_ARCH_X86, UC_MODE_32, &uc);
        if (err != UC_ERR_OK) { // this shouldn't happen...
            printf("Failed on uc_open() with error returned: %u\n", err);
            exit(1);
        }

        uc_mem_map(uc, BASE_ADDR, 4096, UC_PROT_ALL);
        uc_mem_write(uc, BASE_ADDR, shellcodebuf, sizeof(shellcodebuf)-1);
        uc_emu_start(uc, BASE_ADDR, BASE_ADDR + sizeof(shellcodebuf)-1, 0, 0);

        printf("\n===== BEGIN STACK DUMP ====\n");
        struct register_state regs = stackdump(uc, DEBUG);
        printf("\n===== END STACK DUMP ====\n");

        if (regs.r_eax == 0xdeadbeef) {
            printf("Flag found");
        }
        */
        //uc_close(uc);

        // if msg contains "Exit" then server exit and chat ended.
        if (strncmp("exit", buff, 4) == 0) {
            printf("Server Exit...\n");
            break;
        }
    }
}

/**
 * single-threaded TCP server
 * https://www.geeksforgeeks.org/tcp-server-client-implementation-in-c/
 */
void createServer() {
    int sockfd, connfd, len;
    struct sockaddr_in servaddr, cli;

    // socket create and verification
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1) {
        printf("socket creation failed...\n");
        exit(0);
    }
    else
        printf("Socket successfully created..\n");
    bzero(&servaddr, sizeof(servaddr));

    // assign IP, PORT
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(PORT);

    // Binding newly created socket to given IP and verification
    if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) {
        printf("socket bind failed...\n");
        exit(0);
    }
    else
        printf("Socket successfully binded..\n");

    // Now server is ready to listen and verification
    if ((listen(sockfd, 5)) != 0) {
        printf("Listen failed...\n");
        exit(0);
    }
    else
        printf("Server listening..\n");
    len = sizeof(cli);

    // Accept the data packet from client and verification
    connfd = accept(sockfd, (SA*)&cli, &len);
    if (connfd < 0) {
        printf("server accept failed...\n");
        exit(0);
    }
    else {
        printf("server accept the client...\n");
    }

    // Function for chatting between client and server
    repl(connfd);

    // After chatting close the socket
    close(sockfd);
}
